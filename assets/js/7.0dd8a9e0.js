(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{178:function(e,t,n){"use strict";n.r(t);var a=n(0),s=Object(a.a)({},(function(){this._self._c;return this._m(0)}),[function(){var e=this,t=e._self._c;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"vue3-ts-全景看房"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue3-ts-全景看房"}},[e._v("#")]),e._v(" Vue3 + TS 全景看房")]),e._v(" "),t("h2",{attrs:{id:"创建项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#创建项目"}},[e._v("#")]),e._v(" 创建项目")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("pnpm create vite my-vue-app --template vue\npnpm  install three\n")])])]),t("h2",{attrs:{id:"添加dom元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#添加dom元素"}},[e._v("#")]),e._v(" 添加Dom元素")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<div id="container"></div>\n')])])]),t("h2",{attrs:{id:"加载场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加载场景"}},[e._v("#")]),e._v(" 加载场景")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import {onMounted} from "vue";\nimport {SceneObjects} from "./classes/SceneObject";\nonMounted(() => {  \n  const container = document.getElementById("container") as HTMLElement;\n  const object = new SceneObjects(container,{width:window.innerWidth,height:window.innerHeight});\n  object.loadRoomBG(\'/livingRoom.jpg\');\n})\n')])])]),t("p",[e._v("SceneObjects 类 实现了场景的初始化，使用 loadRoomBG 来 加载本地资源")]),e._v(" "),t("h2",{attrs:{id:"sceneobjects-具体实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sceneobjects-具体实现"}},[e._v("#")]),e._v(" SceneObjects 具体实现")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('import * as THREE from "three";\nimport { OrbitControls } from "three/examples/jsm/controls/OrbitControls";\n\nclass SceneObjects {\n  dom:HTMLElement;\n  scene:THREE.Scene;\n  renderer:THREE.WebGLRenderer;\n  camera:THREE.PerspectiveCamera;\n  ambient:THREE.AmbientLight;\n  obtcontrols:OrbitControls;\n\n  constructor(dom:HTMLElement,size:any) {\n\n    this.dom = dom;\n\n    this.scene = new THREE.Scene();\n    \n    this.ambient = new THREE.AmbientLight(0xffffff);\n    this.scene.add(this.ambient);\n    \n    this.camera = new THREE.PerspectiveCamera(\n        45,\n        size.width / size.height,\n        1,\n        1000\n    );\n    \n    this.renderer = new THREE.WebGLRenderer();\n    this.renderer.setPixelRatio( window.devicePixelRatio );\n    this.renderer.setSize(size.width, size.height);\n    this.renderer.setClearColor(0xffffff, 1);\n    this.dom.appendChild(this.renderer.domElement); \n    \n    this.obtcontrols = new OrbitControls(this.camera, this.renderer.domElement)\n    this.obtcontrols.minDistance = 1;\n    this.obtcontrols.maxDistance = 100;\n    this.obtcontrols.enablePan = false;\n   \n    window.addEventListener(\'resize\', this.handleResize, false)\n  }\n\n\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n    this.render()\n  }\n\n  render(){\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  handleResize = () => {\n    const width = window.innerWidth\n    const height = window.innerHeight\n    this.camera.aspect = width / height\n    this.camera.updateProjectionMatrix()\n    this.renderer.setSize(width, height)\n  }\n\n  loadRoomBG(url){\n    let sphereGeometry = new THREE.SphereGeometry(16, 50, 50);\n    sphereGeometry.scale(16, 16, -16);\n    const textureLoader = new THREE.TextureLoader(); \n    textureLoader.load(url, (texture:any)=> { \n        const material = new THREE.MeshBasicMaterial({ \n            map: texture,\n        }); \n        const mesh = new THREE.Mesh(sphereGeometry, material); \n        this.scene.add(mesh); \n        this.animate(); \n    }) \n  }  \n}\n\nexport {\n    SceneObjects\n} \n')])])]),t("h2",{attrs:{id:"全景图片贴图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全景图片贴图"}},[e._v("#")]),e._v(" 全景图片贴图")]),e._v(" "),t("p",[e._v("全景图贴图就是使用一张鱼眼全景图片以纹理的形式添加到球体上")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("loadRoomBG(url){\n    let sphereGeometry = new THREE.SphereGeometry(16, 50, 50);\n    sphereGeometry.scale(16, 16, -16);\n    const textureLoader = new THREE.TextureLoader(); \n    textureLoader.load(url, (texture:any)=> { \n        const material = new THREE.MeshBasicMaterial({ \n            map: texture,\n        }); \n        const mesh = new THREE.Mesh(sphereGeometry, material); \n        this.scene.add(mesh); \n        this.animate(); \n    }) \n  }  \n")])])]),t("h2",{attrs:{id:"基本概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本概念"}},[e._v("#")]),e._v(" 基本概念")]),e._v(" "),t("h3",{attrs:{id:"场景-scene"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#场景-scene"}},[e._v("#")]),e._v(" 场景 (scene)")]),e._v(" "),t("p",[e._v("场景是一个三维空间, 所有物品的容器。相当于世界, 我们所创造的所有物体光源等都必须添加到场景中才能生效或可见")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" this.scene = new THREE.Scene();\n")])])]),t("h3",{attrs:{id:"相机-camera"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#相机-camera"}},[e._v("#")]),e._v(" 相机 (camera)")]),e._v(" "),t("p",[e._v("相机决定了场景中那个角度的景色会显示出来。相机就像人的眼睛一样，人站在不同位置，抬头或者低头都能够看到不同的景色")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" this.camera = new THREE.PerspectiveCamera(\n        45,\n        size.width / size.height,\n        1,\n        1000\n    );\n")])])]),t("h3",{attrs:{id:"渲染器-render"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染器-render"}},[e._v("#")]),e._v(" 渲染器(render)")]),e._v(" "),t("p",[e._v("渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("this.renderer = new THREE.WebGLRenderer();\nthis.renderer.setPixelRatio( window.devicePixelRatio );\nthis.renderer.setSize(size.width, size.height);\nthis.renderer.setClearColor(0xffffff, 1);\nthis.dom.appendChild(this.renderer.domElement); \n")])])]),t("h3",{attrs:{id:"渲染循环"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#渲染循环"}},[e._v("#")]),e._v(" 渲染循环")]),e._v(" "),t("p",[e._v("调用requestAnimationFrame方法对整个场景进行实时渲染")]),e._v(" "),t("h3",{attrs:{id:"轨道控制器（orbitcontrols）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#轨道控制器（orbitcontrols）"}},[e._v("#")]),e._v(" 轨道控制器（OrbitControls）")]),e._v(" "),t("p",[e._v("使用控制器实现移动、改变视角等效果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" this.obtcontrols = new OrbitControls(this.camera, this.renderer.domElement)\nthis.obtcontrols.minDistance = 1;\nthis.obtcontrols.maxDistance = 100;\nthis.obtcontrols.enablePan = false;\n")])])]),t("h2",{attrs:{id:"完整代码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#完整代码"}},[e._v("#")]),e._v(" 完整代码")]),e._v(" "),t("ol",[t("li",[e._v("[Vue3 + TS 全景看房] (https://github.com/daqianduanshuo/3d/tree/main/quanjing)")])])])}],!1,null,null,null);t.default=s.exports}}]);